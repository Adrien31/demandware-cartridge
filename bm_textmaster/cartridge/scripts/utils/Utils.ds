/*
*	Utility functions for the cartridge
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.io );
importPackage( dw.net );
importPackage( dw.util );
importPackage( dw.crypto );

importClass( dw.web.Resource );

// API Includes
var StringUtils = require('dw/util/StringUtils');

// Lib Includes
var LogUtils = require('~/cartridge/scripts/utils/LogUtils');

// Global Variables
var Utils = {};

Utils.log = LogUtils.getLogger("Utils");

/**
*	Gets folder path from absolute path of file
*/
Utils.getFolderPath = function(absPath : String){
	var folderPath = "";
	if(absPath){
		folderPath = absPath.substring(0, absPath.lastIndexOf(File.SEPARATOR) + 1);
	}
	return folderPath;
}

/*
*	Gets filename part without extension
*/
Utils.getFileNameNoExt = function(fileName : String){
	var fileNamePart = "";
	if(fileName){
		fileNamePart = fileName.substring(0, fileName.lastIndexOf("."));
	}
	return fileNamePart;
}

/*
*	Gets filename extension
*/
Utils.getFileNameExtension = function(fileName : String){
	var fileNameExtension = "";
	if(fileName){
		fileNameExtension = fileName.substring(fileName.lastIndexOf(".") + 1);
	}
	return fileNameExtension;
}

/*
*	Gets Demandware languages in JSON
*/
Utils.getDWLanguages = function(){
	return [
		{id:"zh",name:"Chinese"},
		{id:"zh_CN",name:"Chinese (China)"},
		{id:"nl",name:"Dutch"},
		{id:"en",name:"English"},
		{id:"en_CA",name:"English (Canada)"},
		{id:"en_GB",name:"English (United Kingdom)"},
		{id:"en_US",name:"English (United States)"},
		{id:"fr",name:"French"},
		{id:"fr_CA",name:"French (Canada)"},
		{id:"fr_FR",name:"French (France)"},
		{id:"de",name:"German"},
		{id:"de_DE",name:"German (Germany)"},
		{id:"it",name:"Italian"},
		{id:"it_IT",name:"Italian (Italy)"},
		{id:"ja",name:"Japanese"},
		{id:"ja_JP",name:"Japanese (Japan)"},
		{id:"es",name:"Spanish"}
	];
}

/*
*	Gets all underlying subcategories of a root category, in a single array
*/
Utils.getAllSubCategories = function(root){
	var subCategories, category, nextLevelCategories,
		output = [];
	
	subCategories = root.getSubCategories();
	for each(category in subCategories){
		output.push(category);
	}
	
	for each(category in subCategories){
		nextLevelCategories = Utils.getAllSubCategories(category);
		output.push.apply(output, nextLevelCategories);
	}
	
	return output;
}

/*
*	Gets name of the locale if locale ID is passed
*/
Utils.getLocaleName = function(localeID){
	var localeName = "",
		locales = Utils.getDWLanguages(),
		locale;
	
	for each(locale in locales){
		if(locale.id == localeID){
			localeName = locale.name;
			break;
		}
	}
	
	return localeName;
}

/*
*	Communicates with TextMaster APIs
*/
Utils.TextMasterClient = function(method, endPoint, request){
	var apiKey: String = Site.getCurrent().getCustomPreferenceValue('TMApiKey') || "",
		apiSecret: String = Site.getCurrent().getCustomPreferenceValue('TMApiSecret') || "",
		date: String = StringUtils.formatCalendar(dw.util.Calendar(), "yyyy-MM-dd HH:mm:ss"),
		messageDigest: MessageDigest = new MessageDigest(MessageDigest.DIGEST_SHA_1),
		signature: Bytes = messageDigest.digest(new Bytes(apiSecret + date, "UTF-8")), 
		signatureString: String = signature.toString(),
		endPointUrl: String = Resource.msg("api.base","textmaster",null) + endPoint,
		httpClient: HTTPClient = new HTTPClient(),
		response: Object;

	httpClient.setRequestHeader('Apikey', apiKey);
	httpClient.setRequestHeader('Date', date);
	httpClient.setRequestHeader('Signature', signatureString);
	httpClient.setRequestHeader('Content-Type', 'application/json');
	
	httpClient.setTimeout(5000);
	httpClient.open(method, endPointUrl);
	httpClient.send(request);
	   
	if (httpClient.statusCode == 200 || httpClient.statusCode == 201) {
		response = JSON.parse(httpClient.getText());
	}
	else{
		Utils.log.error("Error on http request: "+ httpClient.getErrorText());
		response = null;
	}
	
	return response;
}

/*
*	Converts Demandware locale ID format (eg:- en_US) to TextMaster locale ID format (eg:- en-us)
*/
Utils.toTextMasterLocaleID = function(locale){
	locale = locale.toLowerCase().replace("_", "-");
	
	return locale;
}

/*
*	Converts TextMaster locale ID format (eg:- en-us) to Demandware locale ID format (eg:- en_US)
*/
Utils.toDemandwareLocaleID = function(locale){
	var localePart = locale.split("-");
	
	locale = localePart[0];
	
	if(localePart[1] != undefined){
		locale += ("_" + localePart[1].toUpperCase);
	}
	
	return locale;
}

/*
*	Convert first letter to uppercase
*/
Utils.firstLetterCapital = function(str){
	return str.charAt(0).toUpperCase() + str.slice(1);
}

/*
*	Gets word count
*/
Utils.getWordCount = function(str){
	return str.split(" ").length;
}

module.exports = Utils;
