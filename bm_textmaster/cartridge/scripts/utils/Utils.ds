/*
*	Utility functions for the cartridge
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.io );

importClass( dw.web.Resource );

// API Includes
var StringUtils = require('dw/util/StringUtils');

// Lib Includes
var LogUtils = require('~/cartridge/scripts/utils/LogUtils');

// Global Variables
var Utils = {};

Utils.log = LogUtils.getLogger("Utils");

/**
*	Gets folder path from absolute path of file
*/
Utils.getFolderPath = function(absPath : String){
	var folderPath = "";
	if(absPath){
		folderPath = absPath.substring(0, absPath.lastIndexOf(File.SEPARATOR) + 1);
	}
	return folderPath;
}

/*
*	Gets filename part without extension
*/
Utils.getFileNameNoExt = function(fileName : String){
	var fileNamePart = "";
	if(fileName){
		fileNamePart = fileName.substring(0, fileName.lastIndexOf("."));
	}
	return fileNamePart;
}

/*
*	Gets filename extension
*/
Utils.getFileNameExtension = function(fileName : String){
	var fileNameExtension = "";
	if(fileName){
		fileNameExtension = fileName.substring(fileName.lastIndexOf(".") + 1);
	}
	return fileNameExtension;
}

/*
*	Gets Demandware languages in JSON
*/
Utils.getDWLanguages = function(){
	return [
		{id:"zh",name:"Chinese"},
		{id:"zh_CN",name:"Chinese (China)"},
		{id:"nl",name:"Dutch"},
		{id:"en",name:"English"},
		{id:"en_CA",name:"English (Canada)"},
		{id:"en_GB",name:"English (United Kingdom)"},
		{id:"en_US",name:"English (United States)"},
		{id:"fr",name:"French"},
		{id:"fr_CA",name:"French (Canada)"},
		{id:"fr_FR",name:"French (France)"},
		{id:"de",name:"German"},
		{id:"de_DE",name:"German (Germany)"},
		{id:"it",name:"Italian"},
		{id:"it_IT",name:"Italian (Italy)"},
		{id:"ja",name:"Japanese"},
		{id:"ja_JP",name:"Japanese (Japan)"},
		{id:"es",name:"Spanish"}
	];
}

/*
*	Gets all underlying subcategories of a root category, in a single array
*/
Utils.getAllSubCategories = function(root){
	var subCategories, category, nextLevelCategories,
		output = [];
	
	subCategories = root.getSubCategories();
	for each(category in subCategories){
		output.push(category);
	}
	
	for each(category in subCategories){
		nextLevelCategories = Utils.getAllSubCategories(category);
		output.push.apply(output, nextLevelCategories);
	}
	
	return output;
}

/*
*	Gets name of the locale if locale ID is passed
*/
Utils.getLocaleName = function(localeID){
	var localeName = "",
		locales = Utils.getDWLanguages(),
		locale;
	
	for each(locale in locales){
		if(locale.id == localeID){
			localeName = locale.name;
			break;
		}
	}
	
	return localeName;
}

module.exports = Utils;
