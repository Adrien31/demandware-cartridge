/**
* 	Return Projects data to Follow up:    
*   
*	@output Documents : Array
*
*/

importPackage(dw.system);

importClass( dw.web.Resource );

// Lib Includes
var LogUtils = require('~/cartridge/scripts/utils/LogUtils'),
	Utils = require('~/cartridge/scripts/utils/Utils');

// Global variables
var log;

function execute( pdict : PipelineDictionary ) : Number
{
   	var projects, project, projectResult, documentResult, documentEndPoint,
		projectsEndPoint = Resource.msg("api.get.projects","textmaster",null),
		documents = [], document, doc, actions;

   	log = LogUtils.getLogger("getFollowUpList");
   
   	projectResult = Utils.TextMasterClient("GET", projectsEndPoint);
   	projects = (projectResult && projectResult.projects) ? projectResult.projects : [];
   	
   	for each(project in projects){
   		documentEndPoint = projectsEndPoint + "/" + project.id +"/"+ Resource.msg("api.get.documents","textmaster",null);
   		documentResult = Utils.TextMasterClient("GET", documentEndPoint);
   		
   		if(documentResult && documentResult.documents){
   			for each(document in documentResult.documents){
   				doc = document;
   				actions = [Resource.msg("follow.action.view","textmaster",null)];
   				
   				switch(doc.status.toLowerCase()){
   					case "in_progress":
   						actions.push(Resource.msg("follow.action.communicate","textmaster",null));
   						break;
   					case "in_review":
   						actions.push(Resource.msg("follow.action.validate","textmaster",null));
   						actions.push(Resource.msg("follow.action.revision","textmaster",null));
   						break;
   				}
   				
   				doc.actions = actions;
   				documents.push(doc);
   			}
   		}
   	}
	
   	pdict.Documents = documents;
   	
   	return PIPELET_NEXT;
}
