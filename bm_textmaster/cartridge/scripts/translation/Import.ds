/**
*	Imports translation data from textMaster projects
*
*	@input ProjectID: String
*	@input DocumentID: String
*/
importPackage( dw.system );
importPackage( dw.io );

importClass( dw.web.Resource );


/* Script Modules */
var logUtils = require('~/cartridge/scripts/utils/LogUtils'),
	utils = require('~/cartridge/scripts/utils/Utils');

/* Global variables */
var log;

function execute( pdict : PipelineDictionary ) : Number
{
	var projectID = pdict.ProjectID,
		documentID = pdict.DocumentID,
		projectEndPoint = Resource.msg("api.get.projects","textmaster",null) +"/"+ projectID,
		docEndPoint = projectEndPoint +"/"+ Resource.msg("api.get.documents","textmaster",null) +"/"+ documentID,
		canImport = false,
		project, doc, content, baseFolder, relativeFolder, fileName,
		swriter, writer, itemType, catalogID, startElement, attr, language, pageAttr, importStartNode, itemID,
		pageAttrs = {
			pageTitle: {},
			pageDescription: {},
			pageKeywords: {},
			pageURL: {}
		};
	
	log = logUtils.getLogger("ImportScript");
	
	
	project = utils.TextMasterClient("GET", projectEndPoint, "");
	
	if(project && project.custom_data.itemType){
		itemType = project.custom_data.itemType;
		catalogID = project.custom_data.catalogID;
		language = utils.toDemandwareLocaleID(project.language_to_code);
		
		try{
			baseFolder = File.IMPEX + File.SEPARATOR + "src";
			relativeFolder = "textmaster" + File.SEPARATOR + itemType;
			fileName = documentID +".xml";
			
			var importDir : File = new File(baseFolder + File.SEPARATOR + relativeFolder);
			
			if(!importDir.exists()){
				importDir.mkdirs();
			}
			
			//xml file
			var importXML : File = new File(baseFolder + File.SEPARATOR + relativeFolder + File.SEPARATOR + fileName);
			
			if(importXML.exists()) {
				importXML.remove();
		    }
		    
		    importXML.createNewFile();
			
			swriter= new FileWriter(importXML);
		    writer = new XMLIndentingStreamWriter(swriter);
		    writer.writeStartDocument("UTF-8","1.0");
		    
		    startElement = itemType == "product" || itemType == "category" ? "catalog" : "library";
		    writer.writeStartElement(startElement);
		    writer.writeAttribute("xmlns","http://www.demandware.com/xml/impex/"+ startElement +"/2006-10-31");
		    
		    if(itemType == "product" || itemType == "category"){
		    	writer.writeAttribute("catalog-id",catalogID);
		    }
		    else{
		    	writer.writeAttribute("library-id",dw.content.ContentMgr.getSiteLibrary().ID);
		    }
			
			doc = utils.TextMasterClient("GET", docEndPoint, "");
			
			if(doc && (doc.status.toLowerCase() == 'in_review' || doc.status.toLowerCase() == 'completed')){
				itemID = doc.custom_data.id || "";
				content = doc.original_content ? JSON.parse(doc.original_content) : [];
		
				writer.writeStartElement(itemType);
			    writer.writeAttribute(itemType+"-id", itemID);
				
				// each system attribute without page attributes
				for each (attr in content){
					if(attr.type == "system" && attr.id.indexOf("page") != 0 && attr.value){
						writer.writeStartElement(utils.idToXMLTag(attr.id));
						writer.writeAttribute("xml:lang",language);
							writer.writeCharacters(attr.value);
						writer.writeEndElement();
					}
				}
				
				// keep each system page attribute ordered list
				for each (attr in content){
					if(attr.type == "system" && attr.id.indexOf("page") == 0 && attr.value){
						pageAttrs[attr.id] = attr;
					}
				}
				
				// each system attribute
				writer.writeStartElement("page-attributes");
				
				for each(pageAttr in pageAttrs){
					if(pageAttr.id){
						writer.writeStartElement(utils.idToXMLTag(pageAttr.id));
						writer.writeAttribute("xml:lang",language);
							writer.writeCharacters(pageAttr.value);
						writer.writeEndElement();
					}
				}
				
				writer.writeEndElement();
				
				// each custom attribute
				writer.writeStartElement("custom-attributes");
				
				for each (attr in content){
					if(attr.type == "custom" && attr.value){
						writer.writeStartElement("custom-attribute");
						writer.writeAttribute("attribute-id",attr.id);
						writer.writeAttribute("xml:lang",language);
							writer.writeCharacters(attr.value);
						writer.writeEndElement();
					}
				}
				
				writer.writeEndElement();//custom-attributes
				
				writer.writeEndElement();//itemType
				canImport = true;
			}
			
			writer.writeEndElement();//startElement
			writer.writeEndDocument();
		}
		catch(ex){
			log.error(ex.message);
		}
		finally{
			if(writer != null){
				writer.flush();
				writer.close();
			}
		}
		
		if(canImport){
			importStartNode = itemType == "product" || itemType == "category" ? "Catalog" : "Content";
			
			// Call Standard import pipeline
			Pipeline.execute("Import-"+ importStartNode, {
				ImportFile: relativeFolder + File.SEPARATOR + fileName
			});
			
			updateTranslatedLanguageList(itemType, itemID, language);
		}
	}
	
	return PIPELET_NEXT;
}

/* update the custom attribute of item to keep list of translated languages */
function updateTranslatedLanguageList(itemType, itemID, language){
	var item;
	
	switch(itemType){
		case "product":
			item = dw.catalog.ProductMgr.getProduct(itemID);
			break;
		case "category":
			item = dw.catalog.CatalogMgr.getCategory(itemID);
			break;
		case "content":
			item = dw.content.ContentMgr.getContent(itemID);
			break;
	}
	
	Transaction.begin();
	
	if(item.custom.TranslatedLanguages != "" && item.custom.TranslatedLanguages != null){
		if(item.custom.TranslatedLanguages.indexOf(language) < 0){
			item.custom.TranslatedLanguages += "," + language;
		}
	}
	else{
		item.custom.TranslatedLanguages = language;
	}

	Transaction.commit();
}
