/**
*	Remove imported file from Impex
*
*	@input ImportFile: String
*	@input ItemType: String
*	@input ItemID: String
*	@input Language: String
*	@input Status: dw.system.Status
*
*/
importPackage( dw.system );
importPackage( dw.io );

// Lib Includes
var LogUtils = require('~/cartridge/scripts/utils/LogUtils');

// Global variables
var log;

function execute( pdict : PipelineDictionary ) : Number
{
	var importFile = pdict.ImportFile,
		itemType = pdict.ItemType,
		itemID = pdict.ItemID,
		language = pdict.Language,
		status = pdict.Status,
		baseFolder = File.IMPEX + File.SEPARATOR + "src",
		importXML;
	
	log = LogUtils.getLogger("removeImportedFile");
	
	try{
		importXML = new File(baseFolder + File.SEPARATOR + importFile);
		
		if(importXML.exists()) {
			importXML.remove();
	    }
	    
	    if(status.status == 0){
	    	updateTranslatedLanguageList(itemType, itemID, language);
	    }
	    else{
	    	log.error("Item import failed with error code: "+ status.code);
	    }
	}
	catch(ex){
		log.error(ex.message);
	}
	
	return PIPELET_NEXT;
}

/* update the custom attribute of item to keep list of translated languages */
function updateTranslatedLanguageList(itemType, itemID, language){
	var item;
	
	switch(itemType){
		case "product":
			item = dw.catalog.ProductMgr.getProduct(itemID);
			break;
		case "category":
			item = dw.catalog.CatalogMgr.getCategory(itemID);
			break;
		case "content":
			item = dw.content.ContentMgr.getContent(itemID);
			break;
	}
	
	Transaction.begin();
	
	if(item.custom.TranslatedLanguages != "" && item.custom.TranslatedLanguages != null){
		if(item.custom.TranslatedLanguages.indexOf(language) < 0){
			item.custom.TranslatedLanguages += "," + language;
		}
	}
	else{
		item.custom.TranslatedLanguages = language;
	}

	Transaction.commit();
}
